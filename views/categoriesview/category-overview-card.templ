package categoriesview

import "github.com/dimitargrozev5/expenses-go-1/internal/models"
import "github.com/dimitargrozev5/expenses-go-1/views/components/cards"
import "fmt"
import "github.com/dimitargrozev5/expenses-go-1/views/components/buttons"
import "github.com/dimitargrozev5/expenses-go-1/views/components/inputs"
import "github.com/dimitargrozev5/expenses-go-1/views/components/dialogs"
import "time"

templ CategoryOverviewCard(category models.CategoryOverview, first, last bool, csrfToken string) {
	@cards.Card() {
		<div class="flex flex-row items-center gap-4">
			<div class="flex flex-col items-center justify-center self-stretch gap-1 -ml-2 -my-2">
				if !first {
					<form action={ templ.SafeURL(fmt.Sprintf("/categories/%d/move-up", category.ID)) } method="post">
						@inputs.CsrfInput(csrfToken)
						@inputs.TextInput(inputs.TextInputProps{Name: "table_order", Type: "hidden", Value: fmt.Sprint(category.TableOrder)})
						@buttons.IconButton("move_up", "")
					</form>
				}
				if !last {
					<form action={ templ.SafeURL(fmt.Sprintf("/categories/%d/move-down", category.ID)) } method="post">
						@inputs.CsrfInput(csrfToken)
						@inputs.TextInput(inputs.TextInputProps{Name: "table_order", Type: "hidden", Value: fmt.Sprint(category.TableOrder)})
						@buttons.IconButton("move_down", "")
					</form>
				}
			</div>
			<div class="flex-[2] flex flex-row items-center gap-1">
				<div class="text-3xl text-primary-600">{ category.Name }</div>
			</div>
			<div class="flex-[1] flex flex-row items-center gap-1">
				<div class="text-2xl text-primary-600">{ fmt.Sprintf("%.2f", category.CurrentAmount) }</div>
			</div>
			<div class="flex flex-col items-center justify-center gap-1">
				@buttons.IconButton("info", "")
				if category.CanBeDeleted {
					@buttons.IconButton("delete_forever", "")
					@dialogs.Dialog(templ.SafeURL(fmt.Sprintf("/categories/%d/delete", category.ID)), false, "Delete account", "Delete") {
						@inputs.CsrfInput(csrfToken)
						<div>Are you sure you want to delete this category forever? It's not being used by any expenses.</div>
					}
				}
			</div>
		</div>
		if !category.CanBeDeleted {
			<div class="mt-3 px-2 flex flex-row justify-between items-center text-xs text-primary-400">
				<div>{ fmt.Sprintf("From %02d.%02d.%d", category.PeriodStart.Day(), category.PeriodStart.Month(), category.PeriodStart.Year()) }</div>
				<div>{ getDaysLeft(category.PeriodEnd) }</div>
				<div>{ fmt.Sprintf("To %02d.%02d.%d", category.PeriodEnd.Day(), category.PeriodEnd.Month(), category.PeriodEnd.Year()) }</div>
			</div>
			if category.SpendingLeft > 0 {
				@spendingLeft(category)
			} else {
				@spendingOver(category)
			}
		}
	}
}

func getDaysLeft(end time.Time) string {
	now := time.Now()
	diff := end.Sub(now)
	return fmt.Sprintf("%0.0f Days Left", diff.Hours()/24)
}

templ spendingLeft(category models.CategoryOverview) {
	<div class="flex flex-row items-stretch text-xs">
		<div
			class="flex flex-row items-center justify-center min-w-fit px-2 py-1 rounded-l-full bg-yellow-300 text-yellow-700"
			{ getSpentWidth(category.SpendingLimit, category.SpendingLeft)... }
		>{ getSpent(category.SpendingLimit, category.SpendingLeft) }</div>
		<div
			class="flex flex-row items-center justify-center min-w-fit px-2 py-1 rounded-r-full bg-green-300 text-green-700"
			{ getLeftWidth(category.SpendingLimit, category.SpendingLeft)... }
		>{ getLeft(category.SpendingLimit, category.SpendingLeft) }</div>
	</div>
}

templ spendingOver(category models.CategoryOverview) {
	<div class="flex flex-row items-stretch text-xs">
		<div
			class="flex flex-row items-center justify-center min-w-fit px-2 py-1 rounded-l-full bg-yellow-300 text-yellow-700"
			{ getSpentWidth(category.SpendingLimit, category.SpendingLeft)... }
		>{ getSpent(category.SpendingLimit, category.SpendingLeft) }</div>
		<div
			class="flex flex-row items-center justify-center min-w-fit px-2 py-1 rounded-r-full bg-red-300 text-red-700"
			{ getLeftWidth(category.SpendingLimit, category.SpendingLeft)... }
		>{ getLeft(category.SpendingLimit, category.SpendingLeft) }</div>
	</div>
}

func getSpent(limit float64, left float64) string {
	if left > 0 {
		spent := limit - left
		return fmt.Sprintf("%.0f", spent)
	} else {
		return fmt.Sprintf("%.0f", limit)
	}
}
func getSpentWidth(limit float64, left float64) templ.Attributes {
	if left > 0 {
		spent := limit - left
		return templ.Attributes{"style": fmt.Sprintf("width: %.0f%s;", spent/limit*100, "%")}
	} else {
		return templ.Attributes{"style": fmt.Sprintf("width: %.0f%s;", limit/(limit-left)*100, "%")}
	}
}

func getLeft(limit float64, left float64) string {
	if left > 0 {
		return fmt.Sprintf("%.0f", left)
	} else {
		return fmt.Sprintf("%.0f", -left)
	}
}
func getLeftWidth(limit float64, left float64) templ.Attributes {
	if left > 0 {
		return templ.Attributes{"style": fmt.Sprintf("width: %.0f%s;", left/limit*100, "%")}
	} else {
		return templ.Attributes{"style": fmt.Sprintf("width: %.0f%s;", (-left)/(limit-left)*100, "%")}
	}
}
