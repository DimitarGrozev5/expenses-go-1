package expensesview

import "github.com/dimitargrozev5/expenses-go-1/internal/models"
import "github.com/dimitargrozev5/expenses-go-1/views/components/cards"
import "fmt"
import "github.com/dimitargrozev5/expenses-go-1/internal/forms"
import "github.com/dimitargrozev5/expenses-go-1/views/components/dialogs"
import "github.com/dimitargrozev5/expenses-go-1/views/components/inputs"

func getAction(id int, method string) templ.SafeURL {
	return templ.URL(fmt.Sprintf("/expenses/%d/%s", id, method))
}

func opened(form *forms.Form) bool {
	return !form.Valid()
}

templ ExpenseCard(expense models.Expense, tags []models.Tag, accounts []models.Account, editForm *forms.Form, csrfToken string) {
	@cards.Card() {
		<div class="flex flex-row items-stretch gap-4 flex-wrap">
			<div class="flex-1 flex flex-col items-center justify-center gap-0.5">
				<div class="text-sm text-primary-400">{ expense.FromAccount.Name }</div>
				<div class="border-t border-t-primary-400 self-stretch mx-1"></div>
				<div class="text-sm text-primary-400">{ expense.FromAccount.Name }</div>
			</div>
			<div class="flex-[3] flex flex-col items-start gap-2 min-w-[50%]">
				<div class="text-2xl">{ fmt.Sprintf("%.2f", expense.Amount) }</div>
				<div class="flex flex-row items-center gap-2 flex-wrap">
					for _, tag := range expense.Tags {
						<div class="px-2 py-0.5 border border-primary-500 rounded-full">{ tag.Name }</div>
					}
				</div>
			</div>
			<div class="flex flex-col items-end">
				<div class="text-xs text-primary-400">{ fmt.Sprintf("%02d.%02d.%d", expense.Date.Day(), expense.Date.Month(), expense.Date.Year()) }</div>
				<div class="text-xs text-primary-400">{ fmt.Sprintf("%02d:%02d", expense.Date.Hour(), expense.Date.Minute()) }</div>
				<div class="flex-1 flex flex-row gap-3 justify-end items-end">
					<button class="toggle-dialog"><span class="material-symbols-outlined text-base">edit</span></button>
					@dialogs.Dialog(getAction(expense.ID, "edit"), opened(editForm), "Edit expense", "Edit") {
						@inputs.CsrfInput(csrfToken)
						@inputs.TextInput(inputs.TextInputProps{
							Name:     "amount",
							Label:    "Amount",
							Type:     "number",
							Required: true,
							Value:    editForm.Get("amount"),
							Error:    editForm.Errors.Get("amount"),
						})
						@inputs.TextInput(inputs.TextInputProps{
							Name:     "date",
							Label:    "Date",
							Type:     "datetime-local",
							Required: true,
							Value:    editForm.Get("date"),
							Error:    editForm.Errors.Get("date"),
						})
						@inputs.TagsInput(tags, inputs.TagsInputProps{
							Name:     "tags",
							Label:    "Tags",
							Required: true,
							Value:    editForm.Get("tags"),
							Error:    editForm.Errors.Get("tags"),
						})
						@inputs.AccountSelect(accounts, inputs.AccountSelectProps{
							Label:    "From Account",
							Name:     "from_account",
							Required: true,
							Value:    editForm.Get("from_account"),
							Error:    editForm.Errors.Get("from_account"),
						})
					}
					<button class="toggle-dialog"><span class="material-symbols-outlined text-base">delete</span></button>
					@dialogs.Dialog(getAction(expense.ID, "delete"), false, "Delete expense", "Delete") {
						@inputs.CsrfInput(csrfToken)
						<div>Are you sure you want to delete the expense?</div>
					}
				</div>
			</div>
		</div>
	}
}
